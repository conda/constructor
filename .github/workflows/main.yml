name: Build
on:
  push:
    branches:
      - main
    tags:
      - "*"
  pull_request:
    branches:
      - main
defaults:
  run:
    shell: bash
jobs:
  package:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        pyver: ["3.7", "3.8", "3.9", "3.10"]
    steps:
      - name: Print github context
        run: |
          echo "EVENT_NAME:" "$GITHUB_EVENT_NAME"
          echo "       REF:" "$GITHUB_REF"
          echo "  HEAD_REF:" "$GITHUB_HEAD_REF"
          echo "  BASE_REF:" "$GITHUB_BASE_REF"
          echo "       SHA:" "$GITHUB_SHA"
      - name: Set temp dirs correctly
        if: startsWith(matrix.os, 'windows')
        # https://github.com/actions/virtual-environments/issues/712
        shell: powershell
        run: |
          echo "TMPDIR=$env:USERPROFILE\AppData\Local\Temp" >> $env:GITHUB_ENV
          echo "TEMP=$env:USERPROFILE\AppData\Local\Temp" >> $env:GITHUB_ENV
          echo "TMP=$env:USERPROFILE\AppData\Local\Temp" >> $env:GITHUB_ENV
      - name: Retrieve the source code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Build the build environment
        run: |
          [ $RUNNER_OS = 'Windows' ] && CONDA_EXE=$CONDA/Scripts/conda.exe
          [ $RUNNER_OS == macOS ] && export CONDA_PKGS_DIRS=~/.pkgs
          ${CONDA_EXE:-conda} create -p ../conda conda conda-build conda-verify
      - name: Build the package
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
          PYTHONIOENCODING: utf-8
          PYTHONUNBUFFERED: True
          # Uncomment to run within conda build
          # RUN_EXAMPLES: "1"
        run: |
          source ../conda/etc/profile.d/conda.sh
          export CODECOV_COMMIT=$(git rev-parse --verify HEAD)
          CONDA_BLD_PATH="${{ runner.temp }}/conda-bld" \
            conda build conda.recipe --python=${{ matrix.pyver }}
      - name: Upload the packages as artifact
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v2
        with:
          # By uploading to the same artifact we can download all of the packages
          # and upload them all to anaconda.org in a single job
          name: package-${{ github.sha }}
          path: ${{ runner.temp }}/conda-bld/*/*.tar.bz2
      - name: Install local constructor
        run: |
          source ../conda/etc/profile.d/conda.sh
          CONDA_BLD_PATH="${{ runner.temp }}/conda-bld" \
            conda create -n constructor -c local --strict-channel-priority constructor
          conda activate constructor
          installed_channel=$(conda list constructor --json | jq -r '.[].channel')
          if [[ "$installed_channel" != "conda-bld" ]]; then
            echo $(conda list constructor --json)
            echo "Installed constructor is not local!"
            exit 1
          fi
          constructor --version
          constructor --help-construct
      - name: Patch NSIS to use logging builds on Windows
        if: startsWith(matrix.os, 'windows')
        run: |
          source ../conda/etc/profile.d/conda.sh
          conda activate constructor
          nsis_version=$(conda list nsis --json | jq -r ".[].version")
          curl -sL "https://sourceforge.net/projects/nsis/files/NSIS%203/${nsis_version}/nsis-${nsis_version}-log.zip/download" -o "nsis-${nsis_version}-log.zip"
          7z x "nsis-${nsis_version}-log.zip" -aoa -o"$CONDA_PREFIX/NSIS/"
          echo "NSIS_USING_LOG_BUILD=1" >> $GITHUB_ENV
      - name: Run examples and prepare artifacts
        run: |
          source ../conda/etc/profile.d/conda.sh
          conda activate constructor
          mkdir -p examples_artifacts/
          python scripts/run_examples.py --keep-artifacts=examples_artifacts/
      - name: Upload the example installers as artifacts
        if: github.event_name == 'pull_request' && matrix.pyver == '3.9'
        uses: actions/upload-artifact@v2
        with:
          name: installers-${{ runner.os }}-${{ github.sha }}-${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }}
          path: examples_artifacts/
          retention-days: 7

  upload:
    needs: package
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Retrieve the source code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Download the build artifacts
        uses: actions/download-artifact@v2
        with:
          name: package-${{ github.sha }}
          path: conda-bld
      - name: Install conda packages
        run: |
          source $CONDA/bin/activate
          conda install -y sphinx anaconda-client
      - name: Build the documentation for deployment
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          source $CONDA/bin/activate
          cd docs
          make html
      - name: Deploy the documentation
        if: startsWith(github.ref, 'refs/tags/')
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/build/html
      - name: Upload to anaconda.org
        env:
          ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
          GITHUB_REF: ${{ github.ref }}
        run: |
          source $CONDA/bin/activate
          [[ "$GITHUB_REF" =~ ^refs/tags/ ]] || export LABEL="--label dev"
          anaconda --verbose --token $ANACONDA_TOKEN upload --user ctools $LABEL conda-bld/*/*.tar.bz2 --force

  docs:
    name: Check docs are up-to-date
    runs-on: ubuntu-latest
    steps:
      - name: Retrieve the source code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install local constructor
        run: |
          source $CONDA/bin/activate
          conda create -n constructor constructor jinja2
          conda activate constructor
          pip install -U . --no-deps
      - name: Build docs
        run: |
          source $CONDA/bin/activate
          conda activate constructor
          set -ex
          python scripts/make_docs.py
          git diff --exit-code
